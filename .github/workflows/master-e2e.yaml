# This workflow is a reusable one called by other workflows
name: (template) Rancher Turtles E2E tests

on:
  workflow_call:
    # Variables to set when calling this reusable workflow
    secrets:
      gcp_credentials:
        description: Credentials to use to connect
        required: true
      pat_token:
        # A token is needed to be able to add runner on the repo, maybe this can be changed later
        # This token is linked to a personal account
        # So in case of token issue you have to check (no specific order and for example):
        # - the expiration date
        # - if the account associated still exists
        # - if the person still has access to the repo
        description: PAT token used to add runner
        required: true
      aws_access_key:
        description: AWS_ACCESS_KEY_ID required to create AWS Cloud credentials.
        required: true
      aws_secret_key:
        description: AWS_SECRET_ACCESS_KEY required to create AWS Cloud credentials.
        required: true
      qase_api_token:
        description: Qase API token to use for Qase reporting
        required: true
      rancher_password:
        description: Rancher login password
        required: true
      azure_client_id:
        description: AZURE_CLIENT_ID is required to create Azure Cloud credentials
        required: true
      azure_client_secret:
        description: AZURE_CLIENT_SECRET is required to create Azure Cloud credentials
        required: true
      azure_subscription_id:
        description: AZURE_SUBSCRIPTION_ID is required to create Azure Cloud credentials
        required: true
      azure_tenant_id:
        description: AZURE_TENANT_ID is required to create Azure Cloud credentials
        required: true
      azure_location:
        description: AZURE_LOCATION is required to create Azure cluster
        required: true
    inputs:
      cert-manager_version:
        description: Version of cert-manager to use
        type: string
      cluster_name:
        description: Name of the provisioned cluster
        required: true
        type: string
      destroy_runner:
        description: Destroy the auto-generated self-hosted runner
        default: true
        type: boolean
      capi_ui_version:
        description: Version of the capi ui which will be installed (dev/stable)
        default: dev
        type: string
      rancher_log_collector:
        description: URL of the Rancher log collector script
        default: https://raw.githubusercontent.com/rancherlabs/support-tools/master/collection/rancher/v2.x/logs-collector/rancher2_logs_collector.sh
        type: string
      rancher_version:
        description: Rancher Manager channel/version/head_version to use for installation
        default: stable/latest/none
        type: string
      operator_dev_chart:
        description: Install rancher turtles dev chart
        required: true
        type: boolean
      rancher_upgrade:
        description: Rancher Manager channel/version to upgrade to
        type: string
      runner_template:
        description: Runner template to use
        default: capi-e2e-ci-runner-spot-n2-highmem-16-template-v2
        type: string
      test_description:
        description: Short description of the test
        type: string
      ui_account:
        description: Account used to test RBAC role in UI
        required: false
        type: string
      upstream_cluster_version:
        description: Cluster upstream version where to install Rancher (K3s or RKE2)
        default: v1.30.6+k3s1
        type: string
      zone:
        description: GCP zone to host the runner
        default: asia-south2-a
        type: string
      qase_run_id:
        description: Qase run ID to use for reporting
        type: string
      grep_test_by_tag:
        description: Grep tags. For multiple selection separate with spaces
        required: true
        type: string
        default: '@install @short @full'
      turtles_operator_version:
        description: Turtles Operator Version; only to be used when dev chart is set to false; default - latest stable version
        type: string

jobs:
  determine-runner:
    runs-on: ubuntu-latest
    outputs:
      initial-runner: ${{ steps.set-runner.outputs.initial-runner }}
    steps:
      - name: Set Runner
        id: set-runner
        run: |
          if [[ "${{ inputs.grep_test_by_tag }}" == *"@vsphere"* ]]; then
            echo "initial-runner=vsphere" >> $GITHUB_OUTPUT
          else
            echo "initial-runner=ubuntu-latest" >> $GITHUB_OUTPUT
          fi
      
  create-runner:
    # if: "!contains(github.event.inputs.grep_test_by_tag, '@vsphere')"
    needs: determine-runner
    runs-on: ${{ needs.determine-runner.outputs.initial-runner }}
    outputs:
      uuid: ${{ steps.generator.outputs.uuid }}
      runner: ${{ steps.generator.outputs.runner }}
      public_dns: ${{ steps.dns.outputs.public_dns }}
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate UUID and Runner hostname
        id: generator
        run: |
          if [[ ${{ needs.determine-runner.outputs.initial-runner }} == "vsphere" ]]; then
            echo "uuid=vsphere" >> ${GITHUB_OUTPUT}
            echo "runner=vsphere" >> ${GITHUB_OUTPUT}
          else
            # NOTE: keep the runner name to less than 63 characters!
            UUID=$(uuidgen)
            GH_REPO_FULL=${{ github.repository }}
            GH_REPO=${GH_REPO_FULL#*/}
            echo "uuid=${UUID//-}" >> ${GITHUB_OUTPUT}
            echo "runner=${GH_REPO//\//-}-ci-${UUID//-}" >> ${GITHUB_OUTPUT}
          fi
      - name: Authenticate to GCP
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gcp_credentials }}
      - name: Setup gcloud
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        uses: google-github-actions/setup-gcloud@v2
      - name: Create runner
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        run: |
          gcloud compute instances create ${{ steps.generator.outputs.runner }} \
            --source-instance-template ${{ inputs.runner_template }} \
            --zone ${{ inputs.zone }}
      - name: Create GCP secrets
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        run: |
          echo -n ${{ secrets.pat_token }} \
            | gcloud secrets create PAT_TOKEN_${{ steps.generator.outputs.uuid }} --ttl="36000s" --quiet --data-file=-
          echo -n ${{ github.repository }} \
            | gcloud secrets create GH_REPO_${{ steps.generator.outputs.uuid }} --ttl="36000s" --quiet --data-file=-
      - name: Get public dns name in GCP
        id: dns
        run: |
          if [[ ${{ needs.determine-runner.outputs.initial-runner }} == "vsphere" ]]; then
            echo "public_dns=10.124.139.236.nip.io" >> ${GITHUB_OUTPUT}
          else
            for ((i=0; i<10; i++)); do
              PUBLIC_IP=$(gcloud compute instances list --format="value(EXTERNAL_IP)" \
                --filter="name=${{ steps.generator.outputs.runner }}" 2> /dev/null)
              [[ -n "${PUBLIC_IP}" ]] && break
              sleep 2
            done
            PUBLIC_DNS=$(dig -x ${PUBLIC_IP} +short 2> /dev/null | sed 's/\.$//')
            echo "public_dns=${PUBLIC_DNS}" >> ${GITHUB_OUTPUT}
            # Raise an error if either IP and/or DNS are empty
            if [[ -z "${PUBLIC_IP}" || -z "${PUBLIC_DNS}" ]]; then
              echo "PUBLIC_IP and/or PUBLIC_DNS are empty!" >&2
              false
            fi
          fi

  pre-qase:
    needs: determine-runner
    runs-on: ${{ needs.determine-runner.outputs.initial-runner }}
    env:
      QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}
      QASE_PROJECT_CODE: RT
    outputs:
      qase_run_description: ${{ steps.qase.outputs.qase_run_description }}
      qase_run_id: ${{ steps.qase.outputs.qase_run_id }}
      qase_run_name: ${{ steps.qase.outputs.qase_run_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: tests/go.mod
      - name: Create/Export Qase Run
        id: qase
        env:
          QASE_RUN_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.rancher_version || github.workflow }}
        run: |
          case ${{ inputs.qase_run_id }} in
            'auto')
              # Define and export URL of GH test run in Qase run description
              GH_RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              QASE_DESC="${GH_RUN_URL}"
              export QASE_RUN_DESCRIPTION="${QASE_DESC}"

              # Use full rancher version
              QASE_RUN_NAME=$(echo $QASE_RUN_NAME | grep -P '[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+[0-9]+)?' || true)
              # Or workflow name if the full rancher version is not found
              if [ -z "$QASE_RUN_NAME" ]; then
                QASE_RUN_NAME="${{ github.workflow }}"
              fi

              # Create a Qase run, get its ID
              ID=$(cd tests && make create-qase-run)

              # Export outputs for future use
              echo "qase_run_description=${QASE_DESC}" >> ${GITHUB_OUTPUT}
              echo "qase_run_id=${ID}" >> ${GITHUB_OUTPUT}
              echo "qase_run_name=${QASE_RUN_NAME}" >> ${GITHUB_OUTPUT}

              # Just an info for debugging purposes
              echo -e "Exported values:\nQASE_RUN_ID=${ID}\nQASE_RUN_DESCRIPTION=${QASE_DESC}\nQASE_RUN_NAME=${QASE_RUN_NAME}"
              ;;
            'none')
              echo "qase_run_id=" >> ${GITHUB_OUTPUT}
              echo "### Test not reported in QASE!" >> ${GITHUB_STEP_SUMMARY}
              ;;
            [0-9]*)
              # If the run ID has been specified
              echo "qase_run_id=${{ inputs.qase_run_id }}" >> ${GITHUB_OUTPUT}
              ;;
          esac

  e2e:
    needs: [create-runner, pre-qase]
    runs-on: ${{ needs.create-runner.outputs.uuid }}
    env:
      CERT_MANAGER_VERSION: ${{ inputs.cert-manager_version }}
      CLUSTER_NAME: ${{ inputs.cluster_name }}
      CLUSTER_NS: fleet-default
      # K3S / RKE2 flags to use for installation
      INSTALL_K3S_SKIP_ENABLE: true
      INSTALL_K3S_VERSION: ${{ inputs.upstream_cluster_version }}
      K3S_KUBECONFIG_MODE: 0644
      # Distribution to use to host Rancher Manager (K3s or RKE2)
      K8S_UPSTREAM_VERSION: ${{ inputs.upstream_cluster_version }}
      # For Rancher Manager
      RANCHER_VERSION: ${{ inputs.rancher_version }}
      TIMEOUT_SCALE: 3
      QASE_API_TOKEN: ${{ secrets.qase_api_token }}
      QASE_PROJECT_CODE: RT
      QASE_RUN_ID: ${{ needs.pre-qase.outputs.qase_run_id }}
      # NOTE: this REPORT var is needed for Cypress!
      QASE_REPORT: 1
      TURTLES_REPO: rancher/turtles
      CONTROLLER_IMG: localhost:5000/$TURTLES_REPO
    steps:
      - name: Add /usr/local/bin into PATH
        run: |
          echo "/usr/local/bin/" >> ${GITHUB_PATH}
          echo 'Defaults secure_path="/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"' | sudo tee /etc/sudoers.d/0-custom_secure_path
      - name: Install helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      # Build rancher-turtles latest chart
      - name: Check out rancher-turtles repo
        if: ${{ inputs.operator_dev_chart == true }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TURTLES_REPO }}
      - name: Install Go
        if: ${{ inputs.operator_dev_chart == true }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      # This step builds latest turtles chart and pushes latest turtles docker image to local docker registry
      - name: Set date variable
        run: |
          echo "TAG=$(date "+%Y.%m.%d")" >> ${GITHUB_ENV}
      - name: Make chart
        if: ${{ inputs.operator_dev_chart == true }}
        run: |
          TAG=v${{ env.TAG }} CONTROLLER_IMG=${{ env.CONTROLLER_IMG }} make e2e-image-build
          RELEASE_TAG=v${{ env.TAG }} CONTROLLER_IMG=${{ env.CONTROLLER_IMG }} CONTROLLER_IMAGE_VERSION=v${{ env.TAG }} make build-chart
          docker run -d -p 5000:5000 --name registry registry:2
          docker push ${{ env.CONTROLLER_IMG }}:v${{ env.TAG }}

      - name: Copy chart file
        if: ${{ inputs.operator_dev_chart == true }}
        run: cp ${{ github.workspace }}/out/package/rancher-turtles-${{ env.TAG }}.tgz ${{ runner.temp }}

      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: tests/go.mod
      - name: Copy chart file for chartmuseum
        if: ${{ inputs.operator_dev_chart == true }}
        run: cp ${{ runner.temp }}/rancher-turtles-${{ env.TAG }}.tgz ${{ github.workspace }}/tests/assets
      - name: Install Rancher Manager
        env:
          PUBLIC_DNS: ${{ needs.create-runner.outputs.public_dns }}
          PUBLIC_DOMAIN: bc.googleusercontent.com
        run: cd tests && make e2e-install-rancher
      - name: Extract component versions/informations
        id: component
        run: |
          # Extract CertManager version
          CERT_MANAGER_VERSION=$(kubectl get pod \
                                   --namespace cert-manager \
                                   -l app=cert-manager \
                                   -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)
          # Extract Rancher Manager version
          RM_VERSION=$(kubectl get pod \
                         --namespace cattle-system \
                         -l app=rancher \
                         -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)
          # Export values
          echo "cert_manager_version=${CERT_MANAGER_VERSION}" >> ${GITHUB_OUTPUT}
          echo "rm_version=${RM_VERSION}" >> ${GITHUB_OUTPUT}
      - name: Install Chartmuseum
        if: ${{ inputs.operator_dev_chart == true }}
        run: cd tests && make e2e-install-chartmuseum
      - name: Cypress tests
        env:
          BROWSER: chrome
          CYPRESS_DOCKER: 'cypress/included:13.6.4'
          CAPI_UI_VERSION: ${{ inputs.capi_ui_version }}
          K8S_UPSTREAM_VERSION: ${{ inputs.upstream_cluster_version }}
          RANCHER_VERSION: ${{ steps.component.outputs.rm_version }}
          RANCHER_PASSWORD: ${{ secrets.rancher_password }}
          RANCHER_URL: https://${{ needs.create-runner.outputs.public_dns }}/dashboard
          RANCHER_USER: admin
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}
          GCP_CREDENTIALS: ${{ secrets.gcp_credentials }}
          AZURE_CLIENT_SECRET: ${{ secrets.azure_client_secret }}
          AZURE_CLIENT_ID: ${{ secrets.azure_client_id }}
          AZURE_TENANT_ID: ${{ secrets.azure_tenant_id }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.azure_subscription_id }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          QASE_RUN_ID: ${{ needs.pre-qase.outputs.qase_run_id }}
          GREPTAGS: ${{ inputs.grep_test_by_tag }}
          TURTLES_OPERATOR_VERSION: ${{inputs.turtles_operator_version}}
          SPEC: |
            e2e/unit_tests/first_connection.spec.ts
            e2e/unit_tests/user.spec.ts
            e2e/unit_tests/turtles_operator.spec.ts
            e2e/unit_tests/turtles_plugin.spec.ts
            e2e/unit_tests/menu.spec.ts
            e2e/unit_tests/providers_setup.spec.ts
            e2e/unit_tests/capd_kubeadm_cluster.spec.ts
            e2e/unit_tests/capd_rke2_cluster.spec.ts
            e2e/unit_tests/capa_rke2_cluster.spec.ts
            e2e/unit_tests/capa_eks_cluster.spec.ts
            e2e/unit_tests/capz_cluster.spec.ts
            e2e/unit_tests/capg_cluster.spec.ts
          UI_ACCOUNT: ${{ inputs.ui_account }}
          UPGRADE_OS_CHANNEL: ${{ inputs.upgrade_os_channel }}
        run: |
          if ${{ inputs.qase_run_id == 'none' }}; then
            # Unset default QASE_* variables when reporting is disabled
            unset QASE_REPORT
            unset QASE_API_TOKEN
            # QASE_RUN_ID is empty string already
          fi

          if [ ${{ inputs.operator_dev_chart }} == true ]; then
            export CHARTMUSEUM_REPO=http://${{ needs.create-runner.outputs.public_dns }}
          fi
          cd tests && make start-cypress-tests
      - name: Upload Cypress screenshots (Basics)
        if: failure() 
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots-basics-${{ inputs.cluster_name }}
          path: tests/cypress/latest/screenshots
          retention-days: 7
          if-no-files-found: ignore
      - name: Upload Cypress videos (Basics)
        # Test run video is always captured, so this action uses "always()" condition
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos-basics-${{ inputs.cluster_name }}
          path: tests/cypress/latest/videos
          retention-days: 7
      - name: Add summary
        if: ${{ always() }}
        run: |
          # Add summary
          echo "## General informations" >> ${GITHUB_STEP_SUMMARY}
          echo -e "***${{ inputs.test_description }}***\n" >> ${GITHUB_STEP_SUMMARY}
          echo "Type of cluster deployed: ${CLUSTER_TYPE:-normal}" >> ${GITHUB_STEP_SUMMARY}
          echo "### Rancher Manager" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Manager Image: ${{ steps.component.outputs.rm_version }}" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Manager Version: ${{ inputs.rancher_version }}" >> ${GITHUB_STEP_SUMMARY}
          echo "CertManager Image: ${{ steps.component.outputs.cert_manager_version }}" >> ${GITHUB_STEP_SUMMARY}
          UI_VERSION=$(helm list -n cattle-ui-plugin-system -o json 2> /dev/null |  jq -r '.[] | .chart')
          TURTLES_VERSION=$(helm list -n rancher-turtles-system -o json 2> /dev/null | jq -r '.[] | .chart')
          echo "CAPI UI Extension Version: $UI_VERSION" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Turtles Operator Version: $TURTLES_VERSION" >> ${GITHUB_STEP_SUMMARY}
          if ${{ inputs.ui_account != '' }}; then
            echo "UI User: ${{ inputs.ui_account }}" >> ${GITHUB_STEP_SUMMARY}
          fi
          echo "### Kubernetes" >> ${GITHUB_STEP_SUMMARY}
          echo "K3s on Rancher Manager: ${{ env.INSTALL_K3S_VERSION }}" >> ${GITHUB_STEP_SUMMARY}

  delete-runner:
    if: ${{ always() && needs.determine-runner.outputs.initial-runner != 'vsphere' }}
    needs: [create-runner, e2e]
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.gcp_credentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Delete GCP secrets
        run: |
          gcloud --quiet secrets delete PAT_TOKEN_${{ needs.create-runner.outputs.uuid }} || true
          gcloud --quiet secrets delete GH_REPO_${{ needs.create-runner.outputs.uuid }} || true
      - name: Delete runner
        if: ${{ always() && needs.create-runner.result == 'success' && inputs.destroy_runner == true }}
        run: |
          gcloud --quiet compute instances delete ${{ needs.create-runner.outputs.runner }} \
            --delete-disks all \
            --zone ${{ inputs.zone }}

  post-qase:
    if: ${{ always() && needs.pre-qase.outputs.qase_run_id != '' }}
    needs: [e2e, pre-qase]
    runs-on: ${{ needs.determine-runner.outputs.initial-runner }}
    env:
      QASE_API_TOKEN: ${{ secrets.qase_api_token }}
      QASE_PROJECT_CODE: RT
      QASE_REPORT: 1
      QASE_RUN_COMPLETE: 1
      QASE_RUN_ID: ${{ needs.pre-qase.outputs.qase_run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: tests/go.mod
      - name: Finalize Qase Run and publish Results
        if: ${{ always() && !contains(needs.e2e.result, 'cancelled') }}
        run: |
          REPORT=$(cd tests && make publish-qase-run)
          echo "${REPORT}"

          # Extract report URL and put it in summary
          REPORT_URL=$(awk '/available:/ { print $NF }' <<<${REPORT})
          if [[ -n "${REPORT_URL}" ]]; then
            echo "## QASE Reporting" >> ${GITHUB_STEP_SUMMARY}
            echo "Public Qase report: ${REPORT_URL}" >> ${GITHUB_STEP_SUMMARY}
          fi
      - name: Delete Qase Run if job cancelled or skipped and not using existing id
        if: ${{ always() && (contains(needs.e2e.result, 'cancelled') || contains(needs.e2e.result, 'skipped')) && inputs.qase_run_id == 'auto' }}
        run: cd tests && make delete-qase-run

  # Just to signify that something has been cancelled and it's not useful to check the test
  declare-cancelled:
    if: ${{ always() && contains(needs.e2e.result, 'cancelled') }}
    needs: e2e
    runs-on: ${{ needs.determine-runner.outputs.initial-runner }}
    steps:
      - name: Specify in summary if something has been cancelled
        run: echo "# TEST CANCELLED!" >> ${GITHUB_STEP_SUMMARY}

  cleanup-vsphere-runner:
    if: ${{ always() && needs.determine-runner.outputs.initial-runner == 'vsphere' && inputs.destroy_runner == true }}
    needs: [create-runner, e2e]
    runs-on: vsphere
    steps:
      - name: Cleanup vsphere runner
        run: |
          # do not exit on failure
          set +e
          # uninstall chartmuseum
          sudo systemctl stop chartmuseum
          sudo rm /etc/systemd/system/chartmuseum.service
          sudo systemctl daemon-reload
          sudo rm /usr/local/bin/chartmuseum
          sudo helm plugin uninstall cm-push
          # delete registry container
          registry_id=$(docker ps -a -q -f name=registry)
          [ -n "${registry_id}" ] && docker stop $registry_id
          [ -n "${registry_id}" ] && docker rm $registry_id
          docker system prune --all --volumes --force
          # destroy k3s cluster
          /usr/local/bin/k3s-killall.sh
          /usr/local/bin/k3s-uninstall.sh
