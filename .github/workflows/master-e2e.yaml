# This workflow is a reusable one called by other workflows
name: (template) Rancher Turtles E2E tests

on:
  workflow_call:
    # Variables to set when calling this reusable workflow
    secrets:
      gcp_credentials:
        description: Credentials to use to connect
        required: true
      gcp_project:
        description: GCP Project name details
        required: true
      pat_token:
        # A token is needed to be able to add runner on the repo, maybe this can be changed later
        # This token is linked to a personal account
        # So in case of token issue you have to check (no specific order and for example):
        # - the expiration date
        # - if the account associated still exists
        # - if the person still has access to the repo
        description: PAT token used to add runner
        required: true
      aws_access_key:
        description: AWS_ACCESS_KEY_ID required to create AWS Cloud credentials.
        required: true
      aws_secret_key:
        description: AWS_SECRET_ACCESS_KEY required to create AWS Cloud credentials.
        required: true
      qase_api_token:
        description: Qase API token to use for Qase reporting
        required: true
      rancher_password:
        description: Rancher login password
        required: true
      azure_client_id:
        description: AZURE_CLIENT_ID is required to create Azure Cloud credentials
        required: true
      azure_client_secret:
        description: AZURE_CLIENT_SECRET is required to create Azure Cloud credentials
        required: true
      azure_subscription_id:
        description: AZURE_SUBSCRIPTION_ID is required to create Azure Cloud credentials
        required: true
      azure_tenant_id:
        description: AZURE_TENANT_ID is required to create Azure Cloud credentials
        required: true
      vsphere_secrets_json_base64:
        description: VSPHERE_SECRETS_JSON_BASE64 is required to create vSphere cluster
        required: true
      vsphere_endpoints_list:
        description: VSPHERE_ENDPOINTS_LIST contains space separated list of IPs for kube-vip
        required: true
      docker_auth_username:
          description: DOCKER_AUTH_USERNAME to perform docker login
          required: true
      docker_auth_password:
        description: DOCKER_AUTH_PASSWORD to perform docker login
        required: true
      docker_registry_config:
        description: DOCKER_REGISTRY_CONFIG to perform docker login
        required: true
    inputs:
      cert-manager_version:
        description: Version of cert-manager to use
        type: string
      cluster_name:
        description: Name of the management cluster (Rancher local cluster)
        required: true
        type: string
      destroy_runner:
        description: Destroy the auto-generated self-hosted runner
        default: true
        type: boolean
      capi_ui_version:
        description: Version of the capi-ui-extension which will be installed
        type: string
      rancher_log_collector:
        description: URL of the Rancher log collector script
        default: https://raw.githubusercontent.com/rancherlabs/support-tools/master/collection/rancher/v2.x/logs-collector/rancher2_logs_collector.sh
        type: string
      rancher_version:
        description: Rancher Manager channel/version/head_version to use for installation
        type: string
      turtles_dev_chart:
        description: Install rancher turtles dev chart
        required: true
        type: boolean
      rancher_upgrade:
        description: Rancher Manager channel/version to upgrade to
        type: string
      runner_template:
        description: Runner template to use
        default: capi-e2e-ci-runner-spot-n2-highmem-16-template-v3
        type: string
      test_description:
        description: Short description of the test
        type: string
      ui_account:
        description: Account used to test RBAC role in UI
        required: false
        type: string
      upstream_cluster_version:
        description: Cluster upstream version where to install Rancher (K3s)
        default: v1.31.4+k3s1
        type: string
      zone:
        description: GCP zone to host the runner
        default: asia-south1-a
        type: string
      qase_report:
        description: Report to QASE
        default: false
        type: boolean
      grep_test_by_tag:
        description: Grep tags. For multiple selection separate with spaces
        required: true
        type: string
        default: '@install @short @full'
      turtles_chart_version:
        description: Turtles Chart Version; only to be used when dev chart is set to false; default - latest stable version
        type: string
      skip_cluster_delete:
        description: Skip CAPI cluster and fleet repo deletion tests
        type: boolean
      cluster_name_suffix:
        description: Suffix to be used in cluster name (default - github.run_number)
        type: string

jobs:
  determine-runner:
    runs-on: ubuntu-latest
    outputs:
      initial-runner: ${{ steps.set-runner.outputs.initial-runner }}
    steps:
      - name: Set Runner
        id: set-runner
        run: |
            if [[ "${{ inputs.grep_test_by_tag }}" =~ "@vsphere" ]]; then
              echo "initial-runner=vsphere" >> $GITHUB_OUTPUT
              if [[ "${{ inputs.grep_test_by_tag }}" =~ "@full" || "${{ inputs.grep_test_by_tag }}" =~ "@short" || "${{ inputs.grep_test_by_tag }}" =~ "@upgrade" ]]; then
                echo "ERROR: @vsphere tests cannot be combined with @full, @short and @upgrade"
                exit 1
              fi
            else
              echo "initial-runner=ubuntu-latest" >> $GITHUB_OUTPUT
            fi

  create-runner:
    needs: determine-runner
    runs-on: ${{ needs.determine-runner.outputs.initial-runner }}
    outputs:
      uuid: ${{ steps.generator.outputs.uuid }}
      runner: ${{ steps.generator.outputs.runner }}
      public_dns: ${{ steps.dns.outputs.public_dns }}
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v5
      - name: Generate UUID and Runner hostname
        id: generator
        run: |
          if [[ ${{ needs.determine-runner.outputs.initial-runner }} == "vsphere" ]]; then
            echo "uuid=vsphere" >> ${GITHUB_OUTPUT}
            echo "runner=vsphere" >> ${GITHUB_OUTPUT}
          else
            # NOTE: keep the runner name to less than 63 characters!
            UUID=$(uuidgen)
            GH_REPO_FULL=${{ github.repository }}
            GH_REPO=${GH_REPO_FULL#*/}
            echo "uuid=${UUID//-}" >> ${GITHUB_OUTPUT}
            echo "runner=${GH_REPO//\//-}-ci-${UUID//-}" >> ${GITHUB_OUTPUT}
          fi
      - name: Cleanup vsphere runner if needed
        if: ${{ needs.determine-runner.outputs.initial-runner == 'vsphere' }}
        run: |
          # Cleanup vsphere runner if needed but do not delete github.workspace
          if [ -f /usr/local/bin/k3s ]; then
            cd tests && make vsphere-runner-cleanup
          fi
      - name: Authenticate to GCP
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.gcp_credentials }}
      - name: Setup gcloud
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        uses: google-github-actions/setup-gcloud@v3
      - name: Create runner
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        run: |
          gcloud compute instances create ${{ steps.generator.outputs.runner }} \
            --source-instance-template ${{ inputs.runner_template }} \
            --zone ${{ inputs.zone }} \
            --labels=owner=${{ github.actor }},team=highlander-qa
      - name: Create GCP secrets
        if: ${{ needs.determine-runner.outputs.initial-runner != 'vsphere' }}
        run: |
          echo -n ${{ secrets.pat_token }} \
            | gcloud secrets create PAT_TOKEN_${{ steps.generator.outputs.uuid }} --ttl="36000s" --quiet --data-file=-
          echo -n ${{ github.repository }} \
            | gcloud secrets create GH_REPO_${{ steps.generator.outputs.uuid }} --ttl="36000s" --quiet --data-file=-
      - name: Get public dns name in GCP
        id: dns
        run: |
          if [[ ${{ needs.determine-runner.outputs.initial-runner }} == "vsphere" ]]; then
            LOCAL_IP=$(ip route get 8.8.8.8 | awk '{print $7}')
            # Raise an error if IP is are empty
            if [[ -z "${LOCAL_IP}" ]]; then
              echo "LOCAL_IP is empty!" >&2
              false
            fi
            echo "public_dns=${LOCAL_IP}.sslip.io" >> ${GITHUB_OUTPUT}
          else
            for ((i=0; i<10; i++)); do
              PUBLIC_IP=$(gcloud compute instances list --format="value(EXTERNAL_IP)" \
                --filter="name=${{ steps.generator.outputs.runner }}" 2> /dev/null)
              [[ -n "${PUBLIC_IP}" ]] && break
              sleep 2
            done
            PUBLIC_DNS=$(dig -x ${PUBLIC_IP} +short 2> /dev/null | sed 's/\.$//')
            echo "public_dns=${PUBLIC_DNS}" >> ${GITHUB_OUTPUT}
            # Raise an error if either IP and/or DNS are empty
            if [[ -z "${PUBLIC_IP}" || -z "${PUBLIC_DNS}" ]]; then
              echo "PUBLIC_IP and/or PUBLIC_DNS are empty!" >&2
              false
            fi
          fi

  e2e:
    needs: create-runner
    runs-on: ${{ needs.create-runner.outputs.uuid }}
    outputs:
      qase_run_id: ${{ steps.qase_run_id.outputs.qase_run_id }}
    env:
      # K3S flags to use for installation
      INSTALL_K3S_SKIP_ENABLE: true
      INSTALL_K3S_VERSION: ${{ inputs.upstream_cluster_version }}
      K3S_KUBECONFIG_MODE: 0644
      # For Rancher Manager
      RANCHER_USER: admin
      RANCHER_URL: https://${{ needs.create-runner.outputs.public_dns }}/dashboard
      CERT_MANAGER_VERSION: ${{ inputs.cert-manager_version }}
      CLUSTER_NAME: ${{ inputs.cluster_name }}
      # Qase
      QASE_API_TOKEN: ${{ secrets.qase_api_token }}
      QASE_PROJECT_CODE: RT
      QASE_MODE: ${{ inputs.qase_report == true && 'testops' || 'off' }}
      QASE_TESTOPS_RUN_TITLE: ${{ format('[{4}] Rancher-{0} - {1} destroy={2} dev={3}', inputs.rancher_version, inputs.grep_test_by_tag, inputs.destroy_runner, inputs.turtles_dev_chart, github.run_number) }}
      QASE_TESTOPS_RUN_DESCRIPTION: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      # Cypress
      TURTLES_REPO: rancher/turtles
      CONTROLLER_IMG: localhost:5000/$TURTLES_REPO
      BROWSER: chrome
      CYPRESS_DOCKER: 'cypress/included:15.2.0'
      # Inputs
      CAPI_UI_VERSION: ${{ inputs.capi_ui_version }}
      GREPTAGS: ${{ inputs.grep_test_by_tag }}
      TURTLES_CHART_VERSION: ${{ inputs.turtles_chart_version }}
      SKIP_CLUSTER_DELETE: ${{ inputs.skip_cluster_delete }}
      CLUSTER_NAME_SUFFIX: ${{ inputs.cluster_name_suffix }}
      # Secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}
      GCP_CREDENTIALS: ${{ secrets.gcp_credentials }}
      GCP_PROJECT: ${{ secrets.gcp_project }}
      AZURE_CLIENT_SECRET: ${{ secrets.azure_client_secret }}
      AZURE_CLIENT_ID: ${{ secrets.azure_client_id }}
      AZURE_TENANT_ID: ${{ secrets.azure_tenant_id }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.azure_subscription_id }}
      VSPHERE_SECRETS_JSON_BASE64: ${{ secrets.vsphere_secrets_json_base64 }}
      DOCKER_AUTH_USERNAME: ${{ secrets.docker_auth_username }}
      DOCKER_AUTH_PASSWORD: ${{ secrets.docker_auth_password }}
      DOCKER_REGISTRY_CONFIG: ${{ secrets.docker_registry_config }}
      # Common specs: @short @vsphere @full
      SPECS: |
        e2e/capd_rke2_clusterclass.spec.ts
        e2e/capd_rke2_fleet_clusterclass.spec.ts
        e2e/capd_kubeadm_clusterclass.spec.ts
        e2e/capd_kubeadm_ui_clusterclass.spec.ts
        e2e/azure_rke2_v2prov_cluster.spec.ts
        e2e/capv_rke2_clusterclass.spec.ts
        e2e/capv_kubeadm_clusterclass.spec.ts
        e2e/capa_rke2_clusterclass.spec.ts
        e2e/capa_kubeadm_clusterclass.spec.ts
        e2e/capa_eks_clusterclass.spec.ts
        e2e/capg_kubeadm_clusterclass.spec.ts
        e2e/capz_aks_clusterclass.spec.ts
        e2e/capz_rke2_clusterclass.spec.ts
        e2e/capz_kubeadm_clusterclass.spec.ts
    steps:
      - name: Add /usr/local/bin into PATH
        run: |
          echo "/usr/local/bin/" >> ${GITHUB_PATH}
          echo 'Defaults secure_path="/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"' | sudo tee /etc/sudoers.d/0-custom_secure_path
      # To be removed if hitting pull ratelimits
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_auth_username }}
          password: ${{ secrets.docker_auth_password }}
      - name: Install helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      # Build rancher-turtles latest chart
      - name: Check out rancher-turtles repo
        if: ${{ inputs.turtles_dev_chart == true }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.TURTLES_REPO }}
      - name: Install Go
        if: ${{ inputs.turtles_dev_chart == true }}
        uses: actions/setup-go@v6
        with:
          cache: false
          go-version-file: go.mod

      # This step builds latest turtles chart and pushes latest turtles docker image to local docker registry
      - name: Set date variable
        run: |
          echo "TAG=$(date "+%Y.%m.%d")" >> ${GITHUB_ENV}
      - name: Make chart
        if: ${{ inputs.turtles_dev_chart == true }}
        run: |
          TAG=v${{ env.TAG }} CONTROLLER_IMG=${{ env.CONTROLLER_IMG }} make e2e-image-build
          RELEASE_TAG=v${{ env.TAG }} CONTROLLER_IMG=${{ env.CONTROLLER_IMG }} CONTROLLER_IMAGE_VERSION=v${{ env.TAG }} make build-chart
          docker run -d -p 5000:5000 --name registry registry:2
          docker push ${{ env.CONTROLLER_IMG }}:v${{ env.TAG }}

      - name: Copy chart file
        if: ${{ inputs.turtles_dev_chart == true }}
        run: cp ${{ github.workspace }}/out/package/rancher-turtles-${{ env.TAG }}.tgz ${{ runner.temp }}

      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Go
        uses: actions/setup-go@v6
        with:
          cache: false
          go-version-file: tests/go.mod
      - name: Copy chart file for chartmuseum
        if: ${{ inputs.turtles_dev_chart == true }}
        run: cp ${{ runner.temp }}/rancher-turtles-${{ env.TAG }}.tgz ${{ github.workspace }}/tests/assets
      - name: Inject kube-vip controlplane IP for vsphere into capv-helm-values.yaml
        if: ${{ needs.create-runner.outputs.uuid == 'vsphere' }}
        run: |
          # A round-robin distribution of 3 available control plane IPs for kube-vip
          INDEX=$(((${{ github.run_number }} % 3) + 1))
          CP_ENDPOINT_IP=$(echo ${{ secrets.vsphere_endpoints_list }} | cut -d' ' -f${INDEX})
          sed -i "s/replace_cluster_control_plane_endpoint_ip/${CP_ENDPOINT_IP}/" tests/cypress/latest/fixtures/vsphere/capv-helm-values.yaml
      - name: Set Rancher Manager Install version
        run: |
          if [[ "${{ inputs.grep_test_by_tag }}" =~ "@upgrade" ]]; then
            # Required for upgrade tests
            echo "RANCHER_VERSION=head/2.11" >> ${GITHUB_ENV}
          else
            echo "RANCHER_VERSION=${{ inputs.rancher_version }}" >> ${GITHUB_ENV}
          fi
      - name: Install Rancher Manager
        env:
          RANCHER_VERSION: ${{ env.RANCHER_VERSION }}
          PUBLIC_DNS: ${{ needs.create-runner.outputs.public_dns }}
        run: cd tests && make e2e-install-rancher
      - name: Extract component versions/information
        id: component
        run: |
          # Extract CertManager image version
          CERT_MANAGER_IMAGE_VERSION=$(kubectl get pod \
                                   --namespace cert-manager \
                                   -l app=cert-manager \
                                   -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)
          # Extract Rancher Manager image version
          RM_IMAGE_VERSION=$(kubectl get pod \
                         --namespace cattle-system \
                         -l app=rancher \
                         -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)
          # Export values
          echo "cert_manager_image_version=${CERT_MANAGER_IMAGE_VERSION}" >> ${GITHUB_OUTPUT}
          echo "rm_image_version=${RM_IMAGE_VERSION}" >> ${GITHUB_OUTPUT}
          echo "rm_version=${{ env.RANCHER_VERSION }}" >> ${GITHUB_OUTPUT}
      - name: Install Chartmuseum
        if: ${{ inputs.turtles_dev_chart == true }}
        run: cd tests && make e2e-install-chartmuseum
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: current
      - name: Cypress tests
        id: cypress
        env:
          RANCHER_VERSION: ${{ env.RANCHER_VERSION }}
          RANCHER_PASSWORD: ${{ secrets.rancher_password }}
          SPEC: |
            e2e/first_connection.spec.ts
            e2e/turtles_chart.spec.ts
            e2e/turtles_ui_extension.spec.ts
            e2e/menu.spec.ts
            e2e/providers_setup.spec.ts
            ${{ env.SPECS }}
            e2e/capd_rke2_upgrade_clusterclass.spec.ts
        run: |
          if [ ${{ inputs.turtles_dev_chart }} == true ]; then
            export CHARTMUSEUM_REPO=http://${{ needs.create-runner.outputs.public_dns }}
          fi
          cd tests && make start-cypress-tests
      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots-${{ inputs.cluster_name }}
          path: tests/cypress/latest/screenshots
          retention-days: 7
          if-no-files-found: ignore
      - name: Upload Cypress videos
        # Test run video is always captured, so this action uses "always()" condition
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos-${{ inputs.cluster_name }}
          path: tests/cypress/latest/videos
          retention-days: 7
      - name: Store QASE_TESTOPS_RUN_ID for later use
        if: ${{ always() && inputs.qase_report == true }}
        id: qase_run_id
        run: |
          if [ -f tests/cypress/latest/QASE_TESTOPS_RUN_ID.txt ]; then
            QASE_TESTOPS_RUN_ID=$(cat tests/cypress/latest/QASE_TESTOPS_RUN_ID.txt)
            echo "qase_run_id=${QASE_TESTOPS_RUN_ID}" >> ${GITHUB_OUTPUT}
          fi
      - name: Upgrade Rancher Manager
        id: rancher_upgrade
        if: ${{ contains(inputs.grep_test_by_tag, '@upgrade') }}
        env:
          RANCHER_VERSION: head/2.12
          PUBLIC_DNS: ${{ needs.create-runner.outputs.public_dns }}
        run: cd tests && make e2e-upgrade-rancher
      - name: Extract component versions/informations after Rancher Upgrade
        id: upgraded_component
        if: ${{ contains(inputs.grep_test_by_tag, '@upgrade') }}
        run: |
          # Extract Rancher Manager image version
          RM_UPGRADED_IMAGE_VERSION=$(kubectl get pod \
            --namespace cattle-system \
            -l app=rancher \
            -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)
          # Export values
          echo "rm_upgraded_image_version=${RM_UPGRADED_IMAGE_VERSION}" >> ${GITHUB_OUTPUT}
          echo "rm_upgraded_version=${{ env.RANCHER_VERSION }}" >> ${GITHUB_OUTPUT}
      - name: Cypress tests - Upgraded Rancher
        if: ${{ contains(inputs.grep_test_by_tag, '@upgrade') }}
        env:
          RANCHER_VERSION: ${{ env.RANCHER_VERSION }}
          RANCHER_PASSWORD: ${{ secrets.rancher_password }}
          QASE_TESTOPS_RUN_ID: ${{ steps.qase_run_id.outputs.qase_run_id }}
          SPEC: |
            e2e/capd_rke2_upgrade_clusterclass.spec.ts
            ${{ env.SPECS }}
        run: |
          if [ ${{ inputs.turtles_dev_chart }} == true ]; then
            export CHARTMUSEUM_REPO=http://${{ needs.create-runner.outputs.public_dns }}
          fi
          cd tests && make start-cypress-tests
      - name: Upload Cypress screenshots (after-upgrade)
        if: ${{ contains(inputs.grep_test_by_tag, '@upgrade') && failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots-after-upgrade-${{ inputs.cluster_name }}
          path: tests/cypress/latest/screenshots
          retention-days: 7
          if-no-files-found: ignore
      - name: Upload Cypress videos (after-upgrade)
        # Test run video is always captured, so this action uses "always()" condition
        if: ${{ contains(inputs.grep_test_by_tag, '@upgrade') && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos-after-upgrade-${{ inputs.cluster_name }}
          path: tests/cypress/latest/videos
          retention-days: 7
      - name: Add summary
        if: ${{ always() }}
        run: |
          # Add summary
          echo "## General informations" >> ${GITHUB_STEP_SUMMARY}
          echo -e "***${{ inputs.test_description }}***\n" >> ${GITHUB_STEP_SUMMARY}
          echo "### Rancher Manager & Turtles Information" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Manager Image: ${{ steps.component.outputs.rm_image_version }}" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Manager Version: ${{ steps.component.outputs.rm_version }}" >> ${GITHUB_STEP_SUMMARY}
          echo "CertManager Image: ${{ steps.component.outputs.cert_manager_image_version }}" >> ${GITHUB_STEP_SUMMARY}
          UI_VERSION=$(helm list -n cattle-ui-plugin-system -o json 2> /dev/null |  jq -r '.[] | .chart')
          TURTLES_VERSION=$(helm list -n rancher-turtles-system -o json 2> /dev/null | jq -r '.[] | .chart')
          echo "CAPI UI Extension Version: $UI_VERSION" >> ${GITHUB_STEP_SUMMARY}
          echo "Rancher Turtles Installed/Upgraded Chart Version: $TURTLES_VERSION" >> ${GITHUB_STEP_SUMMARY}
          if [[ "${{ inputs.grep_test_by_tag }}" =~ "@upgrade" ]]; then
            echo "### Rancher Manager Upgrade Information" >> ${GITHUB_STEP_SUMMARY}
            echo "Rancher Manager Upgraded Image: ${{ steps.upgraded_component.outputs.rm_upgraded_image_version }}" >> ${GITHUB_STEP_SUMMARY}
          fi
          echo "### Kubernetes" >> ${GITHUB_STEP_SUMMARY}
          echo "K3s on Rancher Manager: ${{ env.INSTALL_K3S_VERSION }}" >> ${GITHUB_STEP_SUMMARY}
          if [[ -n "${{ steps.qase_run_id.outputs.qase_run_id }}" ]]; then
            echo -e "\n### QASE Report" >> ${GITHUB_STEP_SUMMARY}
            echo "View the detailed report [here](https://app.qase.io/run/RT/dashboard/${{ steps.qase_run_id.outputs.qase_run_id }})" >> ${GITHUB_STEP_SUMMARY}
          else
            echo -e "\n### Test not reported in QASE!" >> ${GITHUB_STEP_SUMMARY}
          fi

  delete-runner:
    if: ${{ always() && needs.create-runner.outputs.uuid != 'vsphere' }}
    needs: [create-runner, e2e]
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v5
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.gcp_credentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v3
      - name: Delete GCP secrets
        run: |
          gcloud --quiet secrets delete PAT_TOKEN_${{ needs.create-runner.outputs.uuid }} || true
          gcloud --quiet secrets delete GH_REPO_${{ needs.create-runner.outputs.uuid }} || true
      - name: Delete runner
        if: ${{ always() && inputs.destroy_runner == true }}
        run: |
          gcloud --quiet compute instances delete ${{ needs.create-runner.outputs.runner }} \
            --delete-disks all \
            --zone ${{ inputs.zone }}

  # Just to signify that something has been cancelled and it's not useful to check the test
  declare-cancelled:
    if: ${{ always() && contains(needs.e2e.result, 'cancelled') }}
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      - name: Specify in summary if something has been cancelled
        run: echo "# TEST CANCELLED!" >> ${GITHUB_STEP_SUMMARY}
      - name: Complete the QASE run if cancelled
        # Otherwise the cancelled run would stay in "In Progress" state
        run: |
          RUN_ID=${{ needs.e2e.outputs.qase_run_id }}
          if [ -n "$RUN_ID" ]; then
            curl -X POST \
              --url https://api.qase.io/v1/run/RT/${RUN_ID}/complete \
              -H "Token: ${{ secrets.QASE_API_TOKEN }}" \
              -H 'accept: application/json'
          fi
          echo "QASE run $RUN_ID marked as Completed" >> ${GITHUB_STEP_SUMMARY}
  cleanup-vsphere-runner:
    if: ${{ always() && needs.create-runner.outputs.uuid == 'vsphere' && inputs.destroy_runner == true }}
    needs: [create-runner, e2e]
    runs-on: vsphere
    steps:
      - name: Cleanup vsphere runner
        env:
          WORKSPACE: ${{ github.workspace }}
        run: cd tests && make vsphere-runner-cleanup
